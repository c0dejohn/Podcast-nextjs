# ¿qué es  next.js?

es un framework para construir aplicaciones web modernas en React una de las caracteristicas es que 
es pensando en tener una excelente experiencia de usuario

requisitos 
Html, css, js

# getInitialProps())

permite cargar el contenido principal
de una pagina cuando se debe recurrir a un API

la estructura se maneja de la ste manera:

static async getInitialProst(){
    //aquí tenemos los datos
    let request = await fetch('...')
    letr datos = await request.json()
    return {datos}

}

lo que hace es traer todos los datos esenciales de la página
con fetch y se devuelve cómo un json
estas se cargan cómo props desde react
estos son importantes para renderizar componentes

instalamos mediante npm add isomorphci-fetch es una libreria que nos permite usar fetch del lado 
cuando se ejecuto el server side rendering se ejecutará del browser y del lado del servidor y lo implementamos en index.js dentro de pages

server-side rendering?

en este punto tenemos las props cargadas desde getInitialProps pero necesitado hacer algo con ellas
ya que no se muestran en el render hasta el momento..

lo primero es tomar las props:
    para esto se cro una variable dentro del render en pages/index.js
    render(){
        const { channels } = this.props
    }
tips:
    -cómo hacer layout con react
    menciona un feature llamada Protop:CSS Grids estos nos permiten implementar layouts a nivel 
    componentes sin tener que usar boostrap o algo más formal, ene ste caso la grilla pasa hacer
    parte de cada componete sin necesidad de mezclar cada estilo o implementar stylesheets

    ejemplo

    .channels {
          display: grid;  /para usar css grids
          grid-gap: 15px;
          padding: 15px;
          grid-template-columns: repeat(auto-fill, minmax(160px, 1fr)); //permite crear columnas virtuales 
          a medida que se agranda el viewport a medida que se agranda se agregan más cuadriculas o celdas
          mostradas
        }



# Enlazando páginas


utilizando componente link
    <Link />
        es necesario que tenga otro componente <a> u otro para que funcione

en esra sesion se crea el documento channel.js en donde usaleremos el componente link para linkear las páginas
se debe  el componente de la sgte manera:

importar Link from 'next/link' 

    se crea el link dentro del render(){

            return<div>
                <div className ="channels">
                {channels.map(channel)=>(
                    <Link href="/channel" prefetch> //si el href en este casp va el link no en el a ya next.js lo modifica en el server side rendering para que funcione cómo debe ser
                        <a className="/channel">
                        </a>
                    </link>
                )}
            </div>
    }

    -al hacer click en un elemento  Client Side Rendering carga sólo lo que falta de esa página 
    Cambiando la ruta en el browser

    -si abrimos un nuevo tab

    server side rendering

    Carga todo el Html, CSS y js
    crea una nueva sesión


Cómo funciona el metodo prefetch?
    precarga sólo el payload(HTML,CSS y js)
    no precarga getInitialProps


importante!
    prefecth sólo funciona en producción (npm run build && npm start)
 


# Recibiendo Parametros

static async getInitialProps({query}){
    let id=query.id
    //Obtenemos los datos...
    return{datos}
}

se les pasa a la página channel un atributo id
depues se puede fetchear en la API la información del canal

<div className="channels">
        { channels.map((channel) => (
          <Link href={`/channel?id=${channel.id}`} prefetch key={ channel.id }>se usa un template litera
            <a className="channel">                                             para poner el id del canal
              <img src={ channel.urls.logo_image.original } alt=""/>
              <h2>{ channel.title }</h2>
            </a>
          </Link>
        )) }
</div>

de esta manera obtenemos el id para buscarlo en el API
  para hace esto primero:
    hacemos una llamada a la API donde tomamos el id que se esta pasando por el channel
    ir a la API en este caso audioboom pedir la informacion de ese canal y renderizarlo en la vista

todo esto en channel.js

 static async getInitialProps({ query }) {
    let idChannel = query.id
    //Obtenemos los datos...
    return{datos}
 }

# Performance de Get Initial Props 

Si hay que hacer varias requests, paralelízalas con Promise.all()


al utilizar await en cada fetch al traer los datos desde la API nos evitamos el callback
hell, pero estamos haciendo que el usuario tenga que esperar cerca de un segundo y medio hastaque se complemente
secuencualmente las tres request



 //Hacer 2 request en paralelo
 let[req1,req2] = await Promise.all([
     fetch(url_1),
     fetch(url_2)

 ])


    let dataChannel = await reqChannel.json() este await convierte JSON en un objeto de js, esta llamada no consume tanto tiempo

# vista de podcast
challenge:
1. crear una página/podcast
2. Tomar el id de la query
3. Pedir los datos al API
4. Mostrar el <audio/>
5. Linkearlo desde /channel



####### Creando componentes react ###############

La idea de crear un componente es identificar código duplicado o cosas que relamente no queremos copiar
y pegar y separarlas en archivos independientes y reutilizables

Mejorando el Código
Haciendo que nuestra app sea más mantenible con react

Protip; primero Papel

Boceteamos el código como nos gustaria implementarlo

Crear un layout

donde reutilizamos la navegación
usamos la prop children de reactpara usarlo como contenedor

para hacer layouts en react hay una convencion donde usamos Pascal case... es decir la primera letra en mayuscula (PascalCase)
se crea dentro de la carpeta componentes

render() {
    const { children, title } = this.props permite mostrar todos las propiedades del componente importado dentro del layout

   
}
 <Head/>
    Permite sumar cosas al head 
    ideal para <title> y <meta>

estructura del componente Head:
    <Head>
        <title>Podcasts</title>
    </Head>   



Crear Componentes 
    es indentificar código Duplicado,
    seprarlo en Componentes 
    Defninir una API por componente

Componentes Simples
Lista de objetos
Componentes con lógica

# Reorganizar la App 
challenge:

1.Aplicar <layout/>con titles
2.Crear <PodcastsList />
3.Refactorear /channel
4.Refactorear /podcast

# Manejando Errores 

Status 200
¡Está todo bien!
La página funciona

Error 404 Lo aplicamos si la página no existe

Error 503 lo aplicamos si hay problemas de red o la API no está funcionando


Importante
    siemre hay qeu cambiar el res.statusCode leer el codigo de status htttp
    importamos Error from 'nest/error'
    usar dentro de index.js en el render
    dentro de un try catch

# Personalizando Errores 
 para esto next tiene el componente error

 <Error />
    Utiliza lapágina _error.j
dentro de pages
    _error.js

    export default class Error extends React.Component {
  static getInitialProps({ res, err }) {
    const statusCode = res ? res.statusCode : err ? err.statusCode : null;
    return { statusCode }
  }
  render(){
      return <p>{this.props-statusCode?
                `Error ${this.props.statusCode}en el server`:
                `Error en el browser`}</p>
      }

  }

# Diseñando Urls 

URL's User Friendly
para usuarios y motores de busqueda


principio de Legibilidad
    deben ser entendidas para los usuarios
    //Esto no es legible
    /channel?id=4072121

    //Esto sí
    /posta


 Consistencia: tener las urls de la aplicacion muy bien pensadas
    Deberíamos poder borrar cualquier fragmento
    //todas deberian funcionar
    /podcast/un-buen-dia
    /channel/posta
    /channel
    /

    //Estructura de URLs
    /posta/un-buen-dia
    /posta
    /

# Next Routes 

Named Urls para Next.jsREqueire un server.js custom

usar el plugin next-routes

configurar rutas 
configurar el server 

se crea un archivo staticllamado server.js

y un archivo routes.js
import next-routes
e instalamos desde consola
    npm add next-routes


slug nombre de la pagina en minuscula renderizado para web esto busca una mejor experiencia
de usuario

instalar el componente node server
ya que el script en package json cambiar


# istas Híbridas

this.setState()
Cambia el estado del componente 
por ejemplo, para mostrar un modal



    

Publicando en Github

    mejor para porfotlio

    el Readme

    Incluir información del proyecto
    Cómo levantar entornos
    Quién lo hizo

    estós deberian crearse en al carpeta base del proyecto
    Readme.md (markdown)

// 1.titulo
#  titulo (que mencione que es la aplicacion)

App de podcast integrada con la API ....

// 2.un screenshot

![Descripcion de la imagen](./.static/platzi-logo.png)

// pasos a corres para que funcione la aplicación
## ¿Cómo funciona?
Requiere Node.js version 10

* `npm install` para instalar las dependencias.
* `npm run dev` para el entorno de desarrollo.
* `npm run build && npm start` para el entorno de producción.

## Licencia

MIT 
    
